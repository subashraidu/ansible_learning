# Ansible Roles

An Ansible role is a reusable, self-contained unit of automation that is used to organize and manage tasks, variables, files, templates, and handlers in a structured way.
Roles help to encapsulate and modularize the logic and configuration needed to manage a particular system or application component.
This modular approach promotes reusability, maintainability, and consistency across different playbooks and environments.

Key Components of an Ansible Role

Tasks:
The main list of actions that the role performs.

Handlers:
Tasks that are triggered by changes in other tasks, typically used for actions like restarting services.

Files:
Static files that need to be transferred to managed hosts.

Templates:
Jinja2 templates that can be rendered and transferred to managed hosts.

Vars:
Variables that are used within the role.

Defaults:
Default variables for the role, which can be overridden.

Meta:
Metadata about the role, including dependencies on other roles.

Library:
Custom modules or plugins used within the role.

Module_defaults:
Default module parameters for the role.

Lookup_plugins:
Custom lookup plugins for the role.

Directory Structure of an Ansible Role. An Ansible role follows a specific directory structure:
<role_name>/
  ├── defaults/
  │   └── main.yml
  ├── files/
  ├── handlers/
  │   └── main.yml
  ├── meta/
  │   └── main.yml
  ├── tasks/
  │   └── main.yml
  ├── templates/
  ├── vars/
      └── main.yml

Why Use Ansible Roles?
Modularity: Roles allow you to break down complex playbooks into smaller, reusable components. Each role handles a specific part of the configuration or setup.
Reusability: Once created, roles can be reused across different playbooks and projects. This saves time and effort in writing redundant code.
Maintainability: By organizing related tasks into roles, it becomes easier to manage and maintain the code. Changes can be made in one place and applied consistently wherever the role is used.
Readability: Roles make playbooks cleaner and easier to read by abstracting away the details into logically named roles.
Collaboration: Roles facilitate collaboration among team members by allowing them to work on different parts of the infrastructure independently.
Consistency: Using roles ensures that the same setup and configuration procedures are applied uniformly across multiple environments, reducing the risk of configuration drift.



1. for roles do the user need to create folder every time : ansible can create the entire structure by running ansible-galaxy role init <name of role>
2. roles required to simplify yaml file for complex tasks such as installing kubernetes. Using this roles we can share or upload this into ansible galaxy (similar to docker hub)
3. templates and files are almost simular when you have dynamic files 
4. ansible follows jinja teplating standard ,My name is {{ ansible_facts[ 'hostname' ] }}

- hosts: webservers
  become: true
  vars:
    nginx_port: 8080
    server_name: example.com
  tasks:
    - name: Deploy Nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/example
      notify:
        - Reload Nginx

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded


server {
    listen {{ nginx_port }};
    server_name {{ server_name }};

    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}


Variables (nginx_port, server_name) are passed from the playbook.
Jinja2 Syntax like {{ nginx_port }} is used to insert values dynamically.
The template file (nginx.conf.j2) is rendered and placed at /etc/nginx/sites-available/example.

5. insted of writing your EC2 instance host name directly as it will be changing , you can passs variables into the template files which makes the template files dynamic , where enteries of the file can be modified in the ansible play book
6. defaults are also variables, that means if you are not providing any value to the variables that you have created , it it can take the value by default present in the default/main.yaml 
7. handlesrs are ansible tasks which you want to execute apon a particular action like restarts, which can be called multiple times  
8. command used to run the playbook <ansible-playbook -i inventory.ini firstplaybook.yaml>

