# Passwordless authentication is important in Ansible for several key reasons, especially when managing infrastructure at scale. Here’s why it’s beneficial:

    Security:
    Passwordless methods like SSH keys or token-based authentication reduce the risk of credential theft. Passwords can be compromised through phishing or brute-force attacks, whereas SSH keys are much harder to crack if properly secured.

    Automation-Friendly:
    Ansible is designed to automate tasks across many servers. Passwordless authentication allows Ansible to connect to remote systems without human intervention, enabling seamless automation workflows.

    Consistency and Scalability:
    Managing multiple systems with passwords can be cumbersome. SSH keys or other passwordless methods ensure that the same authentication process works consistently across thousands of nodes without the need to manage individual passwords.

    Auditability and Control:
    SSH keys can be managed, rotated, and revoked easily. You can also control access at a granular level, auditing which key has access to which system.

    No Need for Interactive Prompts:
    Passwordless authentication eliminates the need for interactive password prompts, which is critical for automated scripts, CI/CD pipelines, and other non-interactive environments.

    Improved Compliance:
    Many security standards and compliance frameworks require secure, auditable, and non-reversible authentication methods. Passwordless authentication often aligns better with these requirements.



## How to setup Passwordless Authentication?
	
	EC2 Instances
	1. Using Public Key

	ssh-copy-id -f "-o IdentityFile <PATH TO PEM FILE>" ubuntu@<INSTANCE-PUBLIC-IP>

    ssh-copy-id: This is the command used to copy your public key to a remote machine.
    -f: This flag forces the copying of keys, which can be useful if you have keys already set up and want to overwrite them.
    "-o IdentityFile ": This option specifies the identity file (private key) to use for the connection. The -o flag passes this option to the underlying ssh command.
    ubuntu@: This is the username (ubuntu) and the IP address of the remote server you want to access.
	

	
eval "$(ssh-agent -s)"   # Starts the agent # The agent holds your private key in memory, so you don’t have to enter your passphrase every time you connect to a remote server.# eval runs this output in the current shell,
chmod 600 ~/.ssh/id_rsa  # Secures your private key
ssh-add ~/.ssh/id_rsa    # Adds the key to the agent for seamless SSH access #After starting the agent, you need to load your key into it so the agent can manage it securely.

2. Using Password

    Go to the file /etc/ssh/sshd_config.d/60-cloudimg-settings.conf
    Update PasswordAuthentication yes
	
	for VM:
	cd /etc/ssh/sshd_config.d/
	sudo vim 60-cloudimg-settings.conf
	PasswordAuthentication yes
	
	for other systems:
	sudo vim /etc/ssh/sshd_config
	PasswordAuthentication yes

	Restart SSH -> sudo systemctl restart ssh
	
	connect using: ssh-copy-id ubuntu@98.80.11.165

